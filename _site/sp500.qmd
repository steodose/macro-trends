---
title: "S&P 500 Historical Returns"
format:
  html:
    theme: cosmo
execute:
  echo: false
  warning: false
  message: false
---

::: {.panel-tabset}

### Monthly Returns

```{python, GT Heatmap}
from fredapi import Fred
import pandas as pd
import calendar
from great_tables import GT, md, px

# set column width for better displaying plots
pd.set_option('display.max_colwidth', 1000)

# Fred API Key (keep private!)
fred = Fred(api_key='9357b21a793f849a3ef134b4aab0d7a1')

sp500 = fred.get_series('SP500', observation_start='2000-01-01')
sp500 = sp500.reset_index()
sp500.columns = ['Date', 'Value']

# Convert Date to datetime and prepare data
sp500['Date'] = pd.to_datetime(sp500['Date'])
sp500 = sp500.sort_values('Date').copy()
sp500['Value'] = sp500['Value'].ffill()

sp500['Year'] = sp500['Date'].dt.year
sp500['Month'] = sp500['Date'].dt.month
sp500['MonthName'] = sp500['Date'].dt.month_name().str[:3]

# Calculate end-of-month values and returns
monthly = sp500.groupby(['Year', 'Month'], as_index=False).agg({
    'Value': 'last'
})
monthly['Return'] = monthly.groupby('Year')['Value'].pct_change() * 100
monthly['MonthName'] = monthly['Month'].apply(lambda x: calendar.month_abbr[x])

# Pivot data to wide format
pivot = monthly.pivot(index='Year', columns='MonthName', values='Return')
pivot = pivot[calendar.month_abbr[1:]]  # Order columns Jan to Dec
pivot = pivot.sort_index(ascending=False).round(1).reset_index()

# Build the styled table
(
    GT(pivot)
    .data_color(
        domain=[30, -30],
        palette=["rebeccapurple", "white", "orange"],
        na_color="white",
    )
    .tab_header(
        title=md("**S&P 500 Monthly Performance**")
    )
    .fmt_percent(
        columns=list(pivot.columns[1:]),
        decimals=1,
        scale_values=False
    )
)
```

### Daily Chart

```{python}
import plotly.graph_objects as go

# Ensure proper datetime formatting
sp500['Date'] = pd.to_datetime(sp500['Date'])
sp500 = sp500.sort_values('Date')

# Create interactive Plotly line chart
fig_daily = go.Figure()
fig_daily.add_trace(go.Scatter(x=sp500['Date'], y=sp500['Value'], mode='lines', name='S&P 500'))

fig_daily.update_layout(
    title="Daily S&P 500 Price",
    xaxis_title="Date",
    yaxis_title="S&P 500 Value",
    template="plotly_white"
)

fig_daily.show()
```

:::

### Asset Prices

```{python, Asset Prices}
import plotly.graph_objects as go

# get relevant indices data
house_price_data = fred.get_series('CSUSHPISA')
house_price_data=house_price_data.to_frame(name='CSUSHPISA')

sp500_data = fred.get_series('SP500')
sp500_data=sp500_data.to_frame(name='SP500')

nasdaq_data = fred.get_series('NASDAQ100')
nasdaq_data=nasdaq_data.to_frame(name='NASDAQ100')

btc_data = fred.get_series('CBBTCUSD')
btc_data=btc_data.to_frame(name='CBBTCUSD')

commodity_data = fred.get_series('PPIACO')
commodity_data=commodity_data.to_frame(name='PPIACO')

# Function to rebase columns (setting to an index)
def rebase_columns(df):
    rebased_df = df.copy()
    for column in rebased_df.columns:
        first_value = rebased_df[column].iloc[0]
        rebased_df[column] = (rebased_df[column] / first_value) * 100
    return rebased_df

# Convert daily data to monthly by taking the closing value of each month
btc_data_m = btc_data.resample('M').last()
sp500_data_m = sp500_data.resample('M').last()
nasdaq_data_m = nasdaq_data.resample('M').last()

# Filter each dataset
start_date='2021-01-01'

house_price_data_1=house_price_data.loc[house_price_data.index >= start_date]
btc_data_m_1=btc_data_m.loc[btc_data_m.index >= start_date]
sp500_data_m1=sp500_data_m.loc[sp500_data_m.index >= start_date]
commodity_data_1=commodity_data.loc[commodity_data.index >= start_date]
nasdaq_data_m_1=nasdaq_data_m.loc[nasdaq_data_m.index >= start_date]

# Align all time indexes to start of the month
btc_data_m_1.index=btc_data_m_1.index.to_period('M').to_timestamp()
sp500_data_m1.index=sp500_data_m1.index.to_period('M').to_timestamp()
nasdaq_data_m_1.index=nasdaq_data_m_1.index.to_period('M').to_timestamp()

merged_df = pd.concat(
    [
     btc_data_m_1,
     nasdaq_data_m_1,
     sp500_data_m1,
     house_price_data_1,
     commodity_data_1,
    ],
    axis=1,
    join='outer'  # ensures we have the time index of the series with the most data
    )

plot_df=rebase_columns(merged_df)

plot_df=plot_df.rename(columns={
    'CSUSHPISA':'Case-Shiller U.S. National Home Price Index',
    'CBBTCUSD': 'Bitcoin / USD',
    'PPIACO':'Producer Price Index: All Commodities'
})

# Create a Plotly figure object (inspirted by Martin Wong: https://autonomousecon.substack.com/p/access-economic-and-financial-data)
fig = go.Figure()

# Loop through each column in the DataFrame and add a trace for each column
for col in plot_df.columns:
    fig.add_trace(go.Scatter(x=plot_df.index, y=plot_df[col], mode='lines', name=col))

# Update layout for better readability
fig.update_layout(
    title="Asset prices Indexed to Jan 2021",
    xaxis_title="",
    yaxis_title="",
    template="plotly_dark",
    legend_title="",
    #width=1200,
    #height=600,
    plot_bgcolor="#282a36",
    paper_bgcolor="#282a36",
    legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="left",
        x=0.01,
        #bgcolor="rgba(255,255,255,0)",
        bordercolor="rgba(255,255,255,0.2)",
        borderwidth=1
    ),
    xaxis=dict(
        showgrid=True,
        gridcolor="rgba(255, 255, 255, 0.2)",
        gridwidth=1.3
    ),
    yaxis=dict(
        showgrid=True,
        gridcolor="rgba(255, 255, 255, 0.2)",
        gridwidth=1.3
    )
)

fig.update_traces(line=dict(width=3.5)) # Make lines in plot thicker

# Show the plot
fig.show()

```

