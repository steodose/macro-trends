{"title":"S&P 500 Historical Returns","markdown":{"yaml":{"title":"S&P 500 Historical Returns","format":{"html":{"theme":"cosmo"}},"execute":{"echo":false,"warning":false,"message":false}},"headingText":"Monthly Returns","containsRefs":false,"markdown":"\n\n::: {.panel-tabset}\n\n\n```{python, GT Heatmap}\nfrom fredapi import Fred\nimport pandas as pd\nimport calendar\nfrom great_tables import GT, md, px\n\n# set column width for better displaying plots\npd.set_option('display.max_colwidth', 1000)\n\n# Fred API Key (keep private!)\nfred = Fred(api_key='9357b21a793f849a3ef134b4aab0d7a1')\n\nsp500 = fred.get_series('SP500', observation_start='2000-01-01')\nsp500 = sp500.reset_index()\nsp500.columns = ['Date', 'Value']\n\n# Convert Date to datetime and prepare data\nsp500['Date'] = pd.to_datetime(sp500['Date'])\nsp500 = sp500.sort_values('Date').copy()\nsp500['Value'] = sp500['Value'].ffill()\n\nsp500['Year'] = sp500['Date'].dt.year\nsp500['Month'] = sp500['Date'].dt.month\nsp500['MonthName'] = sp500['Date'].dt.month_name().str[:3]\n\n# Calculate end-of-month values and returns\nmonthly = sp500.groupby(['Year', 'Month'], as_index=False).agg({\n    'Value': 'last'\n})\nmonthly['Return'] = monthly.groupby('Year')['Value'].pct_change() * 100\nmonthly['MonthName'] = monthly['Month'].apply(lambda x: calendar.month_abbr[x])\n\n# Pivot data to wide format\npivot = monthly.pivot(index='Year', columns='MonthName', values='Return')\npivot = pivot[calendar.month_abbr[1:]]  # Order columns Jan to Dec\npivot = pivot.sort_index(ascending=False).round(1).reset_index()\n\n# Build the styled table\n(\n    GT(pivot)\n    .data_color(\n        domain=[30, -30],\n        palette=[\"rebeccapurple\", \"white\", \"orange\"],\n        na_color=\"white\",\n    )\n    .tab_header(\n        title=md(\"**S&P 500 Monthly Performance**\")\n    )\n    .fmt_percent(\n        columns=list(pivot.columns[1:]),\n        decimals=1,\n        scale_values=False\n    )\n)\n```\n\n### Daily Chart\n\n```{python}\nimport plotly.graph_objects as go\n\n# Ensure proper datetime formatting\nsp500['Date'] = pd.to_datetime(sp500['Date'])\nsp500 = sp500.sort_values('Date')\n\n# Create interactive Plotly line chart\nfig_daily = go.Figure()\nfig_daily.add_trace(go.Scatter(x=sp500['Date'], y=sp500['Value'], mode='lines', name='S&P 500'))\n\nfig_daily.update_layout(\n    title=\"Daily S&P 500 Price\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"S&P 500 Value\",\n    template=\"plotly_white\"\n)\n\nfig_daily.show()\n```\n\n:::\n\n### Asset Prices\n\n```{python, Asset Prices}\nimport plotly.graph_objects as go\n\n# get relevant indices data\nhouse_price_data = fred.get_series('CSUSHPISA')\nhouse_price_data=house_price_data.to_frame(name='CSUSHPISA')\n\nsp500_data = fred.get_series('SP500')\nsp500_data=sp500_data.to_frame(name='SP500')\n\nnasdaq_data = fred.get_series('NASDAQ100')\nnasdaq_data=nasdaq_data.to_frame(name='NASDAQ100')\n\nbtc_data = fred.get_series('CBBTCUSD')\nbtc_data=btc_data.to_frame(name='CBBTCUSD')\n\ncommodity_data = fred.get_series('PPIACO')\ncommodity_data=commodity_data.to_frame(name='PPIACO')\n\n# Function to rebase columns (setting to an index)\ndef rebase_columns(df):\n    rebased_df = df.copy()\n    for column in rebased_df.columns:\n        first_value = rebased_df[column].iloc[0]\n        rebased_df[column] = (rebased_df[column] / first_value) * 100\n    return rebased_df\n\n# Convert daily data to monthly by taking the closing value of each month\nbtc_data_m = btc_data.resample('M').last()\nsp500_data_m = sp500_data.resample('M').last()\nnasdaq_data_m = nasdaq_data.resample('M').last()\n\n# Filter each dataset\nstart_date='2021-01-01'\n\nhouse_price_data_1=house_price_data.loc[house_price_data.index >= start_date]\nbtc_data_m_1=btc_data_m.loc[btc_data_m.index >= start_date]\nsp500_data_m1=sp500_data_m.loc[sp500_data_m.index >= start_date]\ncommodity_data_1=commodity_data.loc[commodity_data.index >= start_date]\nnasdaq_data_m_1=nasdaq_data_m.loc[nasdaq_data_m.index >= start_date]\n\n# Align all time indexes to start of the month\nbtc_data_m_1.index=btc_data_m_1.index.to_period('M').to_timestamp()\nsp500_data_m1.index=sp500_data_m1.index.to_period('M').to_timestamp()\nnasdaq_data_m_1.index=nasdaq_data_m_1.index.to_period('M').to_timestamp()\n\nmerged_df = pd.concat(\n    [\n     btc_data_m_1,\n     nasdaq_data_m_1,\n     sp500_data_m1,\n     house_price_data_1,\n     commodity_data_1,\n    ],\n    axis=1,\n    join='outer'  # ensures we have the time index of the series with the most data\n    )\n\nplot_df=rebase_columns(merged_df)\n\nplot_df=plot_df.rename(columns={\n    'CSUSHPISA':'Case-Shiller U.S. National Home Price Index',\n    'CBBTCUSD': 'Bitcoin / USD',\n    'PPIACO':'Producer Price Index: All Commodities'\n})\n\n# Create a Plotly figure object (inspirted by Martin Wong: https://autonomousecon.substack.com/p/access-economic-and-financial-data)\nfig = go.Figure()\n\n# Loop through each column in the DataFrame and add a trace for each column\nfor col in plot_df.columns:\n    fig.add_trace(go.Scatter(x=plot_df.index, y=plot_df[col], mode='lines', name=col))\n\n# Update layout for better readability\nfig.update_layout(\n    title=\"Asset prices Indexed to Jan 2021\",\n    xaxis_title=\"\",\n    yaxis_title=\"\",\n    template=\"plotly_dark\",\n    legend_title=\"\",\n    #width=1200,\n    #height=600,\n    plot_bgcolor=\"#282a36\",\n    paper_bgcolor=\"#282a36\",\n    legend=dict(\n        yanchor=\"top\",\n        y=0.99,\n        xanchor=\"left\",\n        x=0.01,\n        #bgcolor=\"rgba(255,255,255,0)\",\n        bordercolor=\"rgba(255,255,255,0.2)\",\n        borderwidth=1\n    ),\n    xaxis=dict(\n        showgrid=True,\n        gridcolor=\"rgba(255, 255, 255, 0.2)\",\n        gridwidth=1.3\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor=\"rgba(255, 255, 255, 0.2)\",\n        gridwidth=1.3\n    )\n)\n\nfig.update_traces(line=dict(width=3.5)) # Make lines in plot thicker\n\n# Show the plot\nfig.show()\n\n```\n\n","srcMarkdownNoYaml":"\n\n::: {.panel-tabset}\n\n### Monthly Returns\n\n```{python, GT Heatmap}\nfrom fredapi import Fred\nimport pandas as pd\nimport calendar\nfrom great_tables import GT, md, px\n\n# set column width for better displaying plots\npd.set_option('display.max_colwidth', 1000)\n\n# Fred API Key (keep private!)\nfred = Fred(api_key='9357b21a793f849a3ef134b4aab0d7a1')\n\nsp500 = fred.get_series('SP500', observation_start='2000-01-01')\nsp500 = sp500.reset_index()\nsp500.columns = ['Date', 'Value']\n\n# Convert Date to datetime and prepare data\nsp500['Date'] = pd.to_datetime(sp500['Date'])\nsp500 = sp500.sort_values('Date').copy()\nsp500['Value'] = sp500['Value'].ffill()\n\nsp500['Year'] = sp500['Date'].dt.year\nsp500['Month'] = sp500['Date'].dt.month\nsp500['MonthName'] = sp500['Date'].dt.month_name().str[:3]\n\n# Calculate end-of-month values and returns\nmonthly = sp500.groupby(['Year', 'Month'], as_index=False).agg({\n    'Value': 'last'\n})\nmonthly['Return'] = monthly.groupby('Year')['Value'].pct_change() * 100\nmonthly['MonthName'] = monthly['Month'].apply(lambda x: calendar.month_abbr[x])\n\n# Pivot data to wide format\npivot = monthly.pivot(index='Year', columns='MonthName', values='Return')\npivot = pivot[calendar.month_abbr[1:]]  # Order columns Jan to Dec\npivot = pivot.sort_index(ascending=False).round(1).reset_index()\n\n# Build the styled table\n(\n    GT(pivot)\n    .data_color(\n        domain=[30, -30],\n        palette=[\"rebeccapurple\", \"white\", \"orange\"],\n        na_color=\"white\",\n    )\n    .tab_header(\n        title=md(\"**S&P 500 Monthly Performance**\")\n    )\n    .fmt_percent(\n        columns=list(pivot.columns[1:]),\n        decimals=1,\n        scale_values=False\n    )\n)\n```\n\n### Daily Chart\n\n```{python}\nimport plotly.graph_objects as go\n\n# Ensure proper datetime formatting\nsp500['Date'] = pd.to_datetime(sp500['Date'])\nsp500 = sp500.sort_values('Date')\n\n# Create interactive Plotly line chart\nfig_daily = go.Figure()\nfig_daily.add_trace(go.Scatter(x=sp500['Date'], y=sp500['Value'], mode='lines', name='S&P 500'))\n\nfig_daily.update_layout(\n    title=\"Daily S&P 500 Price\",\n    xaxis_title=\"Date\",\n    yaxis_title=\"S&P 500 Value\",\n    template=\"plotly_white\"\n)\n\nfig_daily.show()\n```\n\n:::\n\n### Asset Prices\n\n```{python, Asset Prices}\nimport plotly.graph_objects as go\n\n# get relevant indices data\nhouse_price_data = fred.get_series('CSUSHPISA')\nhouse_price_data=house_price_data.to_frame(name='CSUSHPISA')\n\nsp500_data = fred.get_series('SP500')\nsp500_data=sp500_data.to_frame(name='SP500')\n\nnasdaq_data = fred.get_series('NASDAQ100')\nnasdaq_data=nasdaq_data.to_frame(name='NASDAQ100')\n\nbtc_data = fred.get_series('CBBTCUSD')\nbtc_data=btc_data.to_frame(name='CBBTCUSD')\n\ncommodity_data = fred.get_series('PPIACO')\ncommodity_data=commodity_data.to_frame(name='PPIACO')\n\n# Function to rebase columns (setting to an index)\ndef rebase_columns(df):\n    rebased_df = df.copy()\n    for column in rebased_df.columns:\n        first_value = rebased_df[column].iloc[0]\n        rebased_df[column] = (rebased_df[column] / first_value) * 100\n    return rebased_df\n\n# Convert daily data to monthly by taking the closing value of each month\nbtc_data_m = btc_data.resample('M').last()\nsp500_data_m = sp500_data.resample('M').last()\nnasdaq_data_m = nasdaq_data.resample('M').last()\n\n# Filter each dataset\nstart_date='2021-01-01'\n\nhouse_price_data_1=house_price_data.loc[house_price_data.index >= start_date]\nbtc_data_m_1=btc_data_m.loc[btc_data_m.index >= start_date]\nsp500_data_m1=sp500_data_m.loc[sp500_data_m.index >= start_date]\ncommodity_data_1=commodity_data.loc[commodity_data.index >= start_date]\nnasdaq_data_m_1=nasdaq_data_m.loc[nasdaq_data_m.index >= start_date]\n\n# Align all time indexes to start of the month\nbtc_data_m_1.index=btc_data_m_1.index.to_period('M').to_timestamp()\nsp500_data_m1.index=sp500_data_m1.index.to_period('M').to_timestamp()\nnasdaq_data_m_1.index=nasdaq_data_m_1.index.to_period('M').to_timestamp()\n\nmerged_df = pd.concat(\n    [\n     btc_data_m_1,\n     nasdaq_data_m_1,\n     sp500_data_m1,\n     house_price_data_1,\n     commodity_data_1,\n    ],\n    axis=1,\n    join='outer'  # ensures we have the time index of the series with the most data\n    )\n\nplot_df=rebase_columns(merged_df)\n\nplot_df=plot_df.rename(columns={\n    'CSUSHPISA':'Case-Shiller U.S. National Home Price Index',\n    'CBBTCUSD': 'Bitcoin / USD',\n    'PPIACO':'Producer Price Index: All Commodities'\n})\n\n# Create a Plotly figure object (inspirted by Martin Wong: https://autonomousecon.substack.com/p/access-economic-and-financial-data)\nfig = go.Figure()\n\n# Loop through each column in the DataFrame and add a trace for each column\nfor col in plot_df.columns:\n    fig.add_trace(go.Scatter(x=plot_df.index, y=plot_df[col], mode='lines', name=col))\n\n# Update layout for better readability\nfig.update_layout(\n    title=\"Asset prices Indexed to Jan 2021\",\n    xaxis_title=\"\",\n    yaxis_title=\"\",\n    template=\"plotly_dark\",\n    legend_title=\"\",\n    #width=1200,\n    #height=600,\n    plot_bgcolor=\"#282a36\",\n    paper_bgcolor=\"#282a36\",\n    legend=dict(\n        yanchor=\"top\",\n        y=0.99,\n        xanchor=\"left\",\n        x=0.01,\n        #bgcolor=\"rgba(255,255,255,0)\",\n        bordercolor=\"rgba(255,255,255,0.2)\",\n        borderwidth=1\n    ),\n    xaxis=dict(\n        showgrid=True,\n        gridcolor=\"rgba(255, 255, 255, 0.2)\",\n        gridwidth=1.3\n    ),\n    yaxis=dict(\n        showgrid=True,\n        gridcolor=\"rgba(255, 255, 255, 0.2)\",\n        gridwidth=1.3\n    )\n)\n\nfig.update_traces(line=dict(width=3.5)) # Make lines in plot thicker\n\n# Show the plot\nfig.show()\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"python":"venv/bin/python","message":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"SP500.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.533","theme":"cosmo","title":"S&P 500 Historical Returns"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}